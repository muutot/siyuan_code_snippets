[
  {
    "id": "20250816212926-0000001",
    "name": "blocking-arsi_behavior-color",
    "type": "css",
    "enabled": true,
    "content": ".content.svelte-1np61ga.svelte-1np61ga {\n    background-color: #1F1F1F;\n}\n"
  },
  {
    "id": "20250816212926-0000002",
    "name": "blocking-arsi_behavior-content_block",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg[data-readonly=false] [data-node-id].asri-selected-block:not(#plugin-focus-unique-id,[data-plugin-focus=true])::before {\n    content: none; /* 屏蔽Asri每行前面的光标 */\n}\n"
  },
  {
    "id": "20250816212926-0000003",
    "name": "blocking-arsi_behavior-file_tree",
    "type": "css",
    "enabled": true,
    "content": "body:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons::before {\n    content: none;\n}\n\nbody:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons > :where(div,span) {\n    transform: none;\n    transition: auto;\n    opacity: 1 !important;\n}\n\nbody:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons:hover, body:not(.body-asri--mobile,.body-asri--android,.body-asri--iosApp) .file-tree:where(.sy__file,.sy__outline,.sy__bookmark,.sy__tag,.sy__backlink) .block__icons:focus-within, .block__icons {\n    height: 30px !important;\n}\n"
  },
  {
    "id": "20250816212926-0000004",
    "name": "blocking-arsi_behavior-tab_bar",
    "type": "css",
    "enabled": true,
    "content": "/* 屏蔽 Asri 骚操作*/\n.layout-tab-bar .item:not(.item--pin,.item--focus) .item__icon, .layout-tab-bar .item:not(.item--pin,.item--focus) .item__icon + .item__text {\n    transform: none;\n}\n\n.layout-tab-bar .item:not(.item--pin,.item--focus) .item__text {\n    transform: none;\n}\n"
  },
  {
    "id": "20250816212926-0000005",
    "name": "main-background",
    "type": "css",
    "enabled": true,
    "content": "body {\n    background-image: url('public/background/frosted_win.jpg') !important;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n\n/* 透明化工作区 */\n.layout-tab-container, /* 编辑区 */\n.protyle, /* 大纲, 文档树 */\n.protyle-breadcrumb, /* 面包屑 */\n.fn__flex-column[data-type=wnd] > .fn__flex:first-child /* 标签页栏 */\n{\n    background-color: #00000000 !important;\n}\n"
  },
  {
    "id": "20250816212926-0000006",
    "name": "main-doc_title",
    "type": "css",
    "enabled": true,
    "content": ".protyle-background__ia {\n    margin-left: 20px !important;\n}\n\n/* 文档内容标题 抬头 */\n.protyle-top > .protyle-title.protyle-wysiwyg--attr {\n    position: absolute;\n    top: 0;\n    left: 20%;\n    width: 76%;\n    font-size: 14px !important;\n}\n\n.protyle-title__input {\n    margin-top: 0; /* 抵消主题的css配置 (Asri) */\n}\n\n.protyle-title {\n    margin: 5px 0 0 10px !important;\n    width: 100%;\n    font-size: 1.3em;\n    top: 8px;\n    height: 100px;\n    left: 3%;\n    display: inline-block;\n    position: relative;\n    color: red;\n}\n\n/* 问得标题图标 */\n.protyle-background__icon img, .protyle-background__icon svg {\n    height: auto;\n    width: auto;\n    float: none;\n    border-radius: unset;\n}\n\n.protyle-top {\n    padding-bottom: 15px;\n    position: relative;\n    border-bottom: 2px solid;\n    border-color: transparent; /* 边框颜色设置为透明 */\n    border-image: linear-gradient(to right, #d2a5e9, #e11919, #19ff00) 1;\n    border-radius: 0;\n    min-height: 96px; /* 占位图标高度 */\n    max-width: 80%;\n    left: 10%;\n    display: flex;\n}\n\n.protyle-top .protyle-background__action {\n    display: inline-grid;\n    left: -1%;\n    width: 17%;\n}\n\n.protyle-top .protyle-background__img img {\n    max-height: 100px;\n}\n\n.protyle-too .protyle-background.protyle-background--enable {\n    width: 100%;\n}\n\n/* 按钮位置 */\nbody:not(.body-asri--mobile) .protyle-background:not(.without-icon) .protyle-background__img.fn__none + .protyle-background__ia .protyle-background__action {\n    top: 18px;\n    left: 128px;\n    --y: 0;\n    --x: 0;\n    display: block;\n}\n"
  },
  {
    "id": "20250816212926-0000007",
    "name": "main-editor_area",
    "type": "css",
    "enabled": true,
    "content": "/* 编辑区填充 */\n.protyle-wysiwyg {\n    padding: 25px 50px 285px !important;\n}\n\n.protyle-wysiwyg span[data-type~=em], .protyle-wysiwyg em {\n    font-family: \"Maple Mono NF CN\", serif;\n}\n\n.protyle-title.protyle-wysiwyg--attr {\n    margin: 5px 50px 0 !important;\n}\n"
  },
  {
    "id": "20250816212926-0000008",
    "name": "main-main",
    "type": "css",
    "enabled": true,
    "content": ":root {\n    --b3-theme-background: #1e1e1e;\n    --b3-theme-background-light: rgba(255, 255, 255, .075);\n    --b3-theme-surface: #2b2b2b;\n    --b3-font-family: \"yahei consolas hybrid\", \"Maple Mono NF CN\", system-ui, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"SF Pro SC\", \"SF Pro Text\", \"SF Pro Icons\", \"Helvetica Neue\", \"Luxi Sans\", \"DejaVu Sans\", \"PingFang SC\", \"Segoe UI\", \"Microsoft Yahei\", \"Hiragino Sans GB\", sans-serif, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"Segoe UI Symbol\", \"Android Emoji\", \"EmojiSymbols\" !important;\n}\n\n\n\n.b3-typography:not(.b3-typography--default),\n.protyle-wysiwyg,\n.protyle-title {\n    font-family: \"yahei consolas hybrid\", \"Maple Mono NF CN\", system-ui, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n    \"SF Pro SC\", \"SF Pro Text\", \"SF Pro Icons\", \"Helvetica Neue\", \"Luxi Sans\", \"DejaVu Sans\", \"PingFang SC\", \"Segoe UI\",\n    \"Microsoft Yahei\", \"Hiragino Sans GB\", sans-serif, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"Segoe UI Symbol\", \"Android Emoji\", \"EmojiSymbols\" !important;\n}\n\nbody:not(.body-asri--mobile,.body--window) {\n    --toolbar-height: 32px;\n    --toolbar-height-self: 32px;\n    --topbar-z-index: 2;\n    --avoid-topbar-self: var(--toolbar-height-self);\n}\n\nbody:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar:not(body:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar--readonly) {\n    margin-top: 4px;\n    margin-right: 4px;\n}\n\nbody:not(.body-asri--mobile,.body--window) .layout__center .layout-tab-bar--readonly {\n    margin-left: 0;\n    margin-top: 4px;\n    margin-right: 4px;\n\n    & .item {\n        min-height: 28px;\n    }\n}\n"
  },
  {
    "id": "20250816212926-0000009",
    "name": "main-status_bar",
    "type": "css",
    "enabled": true,
    "content": "body:not(.body-asri--mobile) #dockBottom.fn__none:not(.has-layout-dockb-float) ~ #status .status__msg:not(:empty) {\n    max-width: 1920px;\n}\n"
  },
  {
    "id": "20250816212926-0000010",
    "name": "main-toolbar",
    "type": "css",
    "enabled": true,
    "content": "/* toolbar */\n#layouts > div.fn__flex.fn__flex-1 > div.layout__center.fn__flex.fn__flex-1 > div > div > div.fn__flex {\n    background-color: #161616;\n}\n\n#AsriPluginsIconsDivider {\n    top: 5px !important;\n}\n\n.fn__flex-column[data-type=wnd] > .fn__flex:first-child {\n    height: var(--toolbar-height-self);\n}\n\n/* 标签配置 */\n.layout-tab-bar .item {\n    height: 22px;\n    min-height: 28px;\n    padding: 0;\n}\n\n/* 主菜单图标 */\n#toolbar #barWorkspace {\n    background-color: rgba(0, 0, 0, 0);\n    color: var(--b3-theme-on-surface);\n    font-weight: 500;\n    font-size: 6px;\n    height: 22px;\n    position: relative;\n    margin-top: 4px;\n    margin-bottom: 4px;\n    outline: 1px solid var(--b3-border-color-trans);\n    outline-offset: -1px;\n}\n\n/* 屏蔽主菜单向下箭头 */\n#barWorkspace > svg {\n    display: none;\n}\n\nbody:not(.body-asri--mobile,.body--window) .layout__dockl > .fn__flex:not(.fn__none):first-child .layout-tab-container,\nbody:not(.body-asri--mobile,.body--window) .layout__dockl > .fn__flex.fn__none ~ .fn__flex .layout-tab-container,\nbody:not(.body-asri--mobile,.body--window) .layout__dockr > .fn__flex:not(.fn__none):first-child .layout-tab-container,\nbody:not(.body-asri--mobile,.body--window) .layout__dockr > .fn__flex.fn__none ~ .fn__flex .layout-tab-container {\n    padding-top: var(--avoid-topbar-self);\n}\n\n/* 屏蔽标签页 x 号 */\n.layout-tab-bar span.item__close {\n    display: none;\n}\n\n/* 图标大小 位置 */\n.layout-tab-bar .item__icon > img, .layout-tab-bar .item__icon > svg {\n    height: 14px;\n    width: 14px;\n    margin-top: 0;\n}\n\n/* 右侧功能图标位置 */\ndiv#AsriTopbarRightSpacing {\n    max-width: 18px;\n}\n\n/* 面包屑 */\n.protyle-breadcrumb {\n    height: 30px;\n}\n"
  },
  {
    "id": "20250816212926-0000011",
    "name": "markdown-code",
    "type": "css",
    "enabled": true,
    "content": "/* 字体 */\n:root {\n    --b3-font-family-code: 'ibm plex mono', 'yahei consolas hybrid';\n}\n\n/* 代码块 行高度 */\n.code-block .hljs > span {\n    line-height: 19px;\n}\n\n/* 列表下 距离左侧距离 */\ndiv.li .code-block {\n    left: 30px;\n}\n\n.protyle-wysiwyg .code-block {\n    --b3-protyle-code-linenumber-hl: color-mix(in srgb, var(--b3-theme-surface) 55%, var(--b3-theme-primary));\n    margin: .4em 0 1em 0 !important; /* bottom 连续代码块给命名腾出个地方 */\n    padding: 0.3em 0.2em 0.3em 0.2em !important;\n}\n\n/* 代码块整体 默认设置存在行号*/\n.protyle-wysiwyg .code-block .hljs {\n    padding: 0.3em 0.2em 0.3em 0.2em;\n    background-color: var(--b3-code-block-backgroud-color);\n    /* margin-left: 2.2em; 没有行号的时候清空样式 */\n    position: inherit;\n    max-height: 550px; /* 设置单一代码块最大高度 */\n}\n\n/* 隐藏代码块后 去除上面的 padding 和 maring 显示第一行代码 */\n.protyle-wysiwyg .code-block[fold=\"1\"] .hljs {\n    padding-top: 0;\n    margin-top: 0;\n}\n\n/* 行号 */\n.protyle-wysiwyg .code-block .protyle-linenumber__rows {\n    padding-top: 0px;\n    font-size: 12px;\n    width: 2.2em;\n}\n\n/* 标题栏 */\n.protyle-wysiwyg[data-readonly=false] .code-block .protyle-action {\n    -webkit-user-modify: read-only;\n    /* 修复第一行代码不可点击 修复后 -> 前85%的位置可以点击 */\n    position: absolute;\n    left: 95%;\n    top: 0;\n}\n\n/* 语言选择栏 */\n.code-block .protyle-action .protyle-action__language {\n    -webkit-user-modify: read-only;\n    margin-top: 0;\n    position: absolute;\n    right: inherit;\n    float: right;\n    width: 90px;\n    padding-left: 0;\n    margin-left: 0;\n    margin-right: 4em;\n    text-align: right;\n}\n\n/* 复制按钮 */\n.protyle-action .protyle-action__copy {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    /*border-radius: 8px;*/\n    padding-left: 6px;\n}\n\n/* 复制按钮 折叠按钮 */\n.protyle-action .protyle-icon--expand {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n}\n\n/* 更多按钮 */\n.protyle-action .protyle-icon--last {\n    display: none;\n}\n\n/* 属性名 */\n.code-block > .protyle-attr {\n    top: -16px;\n}\n\n.protyle-wysiwyg [data-node-id][fold=\"1\"]:not(.li):not([data-type=NodeHeading]) {\n    opacity: 1;\n}\n\n.protyle-wysiwyg [data-node-id][fold=\"1\"]:not(.li):not([data-type=NodeHeading]) .protyle-attr {\n    opacity: 1;\n    top: -16px;\n}\n\n/* 代码主题设置 */\n.hljs {\n    color: #EEBEFA;\n    background-color: #2b2d30;\n    font-weight: 500;\n    margin-top: 3px;\n}\n\n.hljs-keyword {\n    color: #2091F6;\n}\n\n.hljs-string {\n    color: #827CDA;\n}\n\n.hljs-attr {\n    color: #40CFDC;\n}\n\n.class_ {\n    color: #fa2aad;\n}\n\n.hljs-title.class_ {\n    color: #fa2aad;\n}\n\n.hljs-type {\n    color: #FF7575;\n}\n\n.function_ {\n    color: #1DF528;\n}\n\n.hljs-title.function_ {\n    color: #1DF528;\n}\n\n.hljs-params {\n    color: #45ee8c;\n}\n\n.hljs-comment {\n    color: #808080;\n}\n\n.hljs-built_in {\n    color: #00CCCC;\n}\n\n.hljs-attribute {\n    color: gold;\n}\n\n.hljs-selector-class {\n    color: #ffa07a;\n}\n\n.hljs-selector-tag {\n    color: #ea51b2;\n}\n\n.hljs-meta {\n    color: #00f769;\n}\n"
  },
  {
    "id": "20250816212926-0000012",
    "name": "markdown-comment",
    "type": "css",
    "enabled": true,
    "content": "[data-theme-mode=dark] .protyle-wysiwyg span[data-type~=inline-memo]:hover {\n    color: #fdfae8 !important; /* 鼠标移到焦点后下划线颜色 */\n    background-color: rgba(0, 0, 0, 0);\n    box-shadow: none;\n}\n\n[data-theme-mode=dark] .protyle-wysiwyg span[data-type~=inline-memo] {\n    text-decoration-color: #00c2ff; /* 默认下划线颜色 */\n}\n\n[data-theme-mode=dark] .tooltip--memo#tooltip {\n    margin-top: 3px;\n    margin-left: 3px;\n    background-color: #2e3236;\n    color: #c78eda;\n}\n\n[data-theme-mode=dark] .protyle-wysiwyg--attr .protyle-attr > div:not(.protyle-attr--memo):not(.protyle-attr--refcount) {\n    color: #00b6ff;\n}\n\n.protyle-wysiwyg [data-node-id] span[data-type~=block-ref]:not(.av__celltext), .protyle-wysiwyg [data-node-id] span[data-type~=file-annotation-ref] {\n    color: #6791f3;\n}\n"
  },
  {
    "id": "20250816212926-0000013",
    "name": "markdown-content",
    "type": "css",
    "enabled": true,
    "content": "/* 加粗文本颜色 */\n.protyle-wysiwyg span[data-type~=strong],\n.protyle-wysiwyg strong {\n    color: #fbd80e;\n}\n\n.protyle-wysiwyg [data-node-id].li > .list {\n    margin-left: 10px !important;\n    padding-left: 35px;\n    padding-top: 0;\n    padding-bottom: 0\n}\n\n/* 文档上面的间距 */\nbody:not(.body--mobile) .protyle-background .protyle-background__img.fn__none + .protyle-background__ia {\n    margin-top: 0;\n    padding-top: 0;\n}\n\n/* 文档前缀表情 */\n.b3-typography img.emoji, .protyle-wysiwyg img.emoji {\n    width: 24px;\n    cursor: auto;\n    vertical-align: middle;\n    margin-right: 2px;\n    margin-left: -3px;\n}\n"
  },
  {
    "id": "20250816212926-0000014",
    "name": "markdown-label",
    "type": "css",
    "enabled": true,
    "content": ".b3-chip--secondary, .b3-chip--primary, .b3-chip--info, .b3-chip--success,\n.b3-chip--warning, .b3-chip--error, .b3-chip--pink {\n    mix-blend-mode: normal !important;\n}\n\n.b3-chip--secondary::before,\n.b3-chip--primary::before,\n.b3-chip--info::before,\n.b3-chip--success::before,\n.b3-chip--warning::before,\n.b3-chip--error::before,\n.b3-chip--pink::before {\n    content: \"#\" !important;\n    margin-right: 5px; /* # 号距离文字的距离 */\n}\n\n/* 当鼠标移动到标签的时候 给x腾出空间 不显示前面的`#` */\n.b3-chip--secondary:hover::before,\n.b3-chip--primary:hover::before,\n.b3-chip--info:hover::before,\n.b3-chip--success:hover::before,\n.b3-chip--warning:hover::before,\n.b3-chip--error:hover::before,\n.b3-chip--pink:hover::before {\n    content: \"\" !important;\n}\n\n.protyle-background__ia .b3-chips {\n    margin-top: 18px;\n    padding: 0 0 0 0;\n}\n\n.protyle-background .b3-chip--secondary {\n    color: #fff !important;\n    background-color: #d6ff0070 !important;\n}\n\n.protyle-background .b3-chip--primary {\n    color: #fff !important;\n    background-color: #0053f9c4 !important;\n}\n\n.protyle-background .b3-chip--info {\n    color: var(--b3-card-info-color) !important;\n    background-color: #28405c !important;\n}\n\n.protyle-background .b3-chip--success {\n    color: var(--b3-card-success-color) !important;\n    background-color: #425347 !important;\n}\n\n.protyle-background .b3-chip--warning {\n    color: var(--b3-card-warning-color) !important;\n    background-color: #554636 !important;\n}\n\n.protyle-background .b3-chip--error {\n    color: var(--b3-card-error-color) !important;\n    background-color: #442724 !important;\n}\n\n.protyle-background .b3-chip--pink {\n    color: var(--b3-theme-on-secondary) !important;\n    background-color: #ea4aaa96 !important;\n}\n\n/* 行级标签 */\n.protyle-wysiwyg [data-node-id] span[data-type~=tag] {\n    --tag-color: #df8300;\n    font-size: 85%;\n}\n"
  },
  {
    "id": "20250816212926-0000015",
    "name": "markdown-line_code",
    "type": "css",
    "enabled": true,
    "content": "/* 行级代码 */\n.protyle-wysiwyg span[data-type~=code], .protyle-wysiwyg code:not(.hljs) {\n    color: #00e100;\n    margin-left: 4px;\n    margin-right: 4px;\n    display: ruby;\n}\n\n/* fix 行级代码残留问题 */\n.b3-typography code:not(.hljs),\n.b3-typography span[data-type~='code'],\n.protyle-wysiwyg code:not(.hljs),\n.protyle-wysiwyg span[data-type~='code'] {\n    word-break: break-all;\n}\n"
  },
  {
    "id": "20250816212926-0000016",
    "name": "markdown-link",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg [data-node-id] span[data-type~=a], .protyle-wysiwyg a {\n    color: var(--b3-protyle-inline-link-color);\n    text-decoration-line: underline;\n    text-decoration-thickness: .08em;\n    text-decoration-color: var(--b3-protyle-inline-link-color);\n}\n"
  },
  {
    "id": "20250816212926-0000017",
    "name": "markdown-list",
    "type": "css",
    "enabled": true,
    "content": "\n.b3-typography li > p,\n.b3-typography > p,\n.b3-typography blockquote > p,\n.b3-typography [data-node-id],\n.protyle-wysiwyg li > p,\n.protyle-wysiwyg > p,\n.protyle-wysiwyg blockquote > p,\n.protyle-wysiwyg [data-node-id] {\n    line-height: 26px;\n    padding: 2px 2px 0 0;\n    margin: 0 0;\n    border-radius: var(--b3-border-radius);\n}\n\ndiv.li > div.p > div {\n    margin-top: 1px;\n}\n\ndiv.li > div.p[data-type=\"NodeParagraph\"] > div {\n    margin-top: 2px;\n}\n\n/* 效果: 一级列表 1.  二级列表 1.1  三级列表 1.1.1 */\n.list[data-subtype=o] {\n    counter-reset: none;\n}\n\n.protyle-wysiwyg .li[data-subtype=o] > .protyle-action,\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] > .protyle-action,\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action,\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action {\n    color: rgba(0, 0, 0, 0) !important;\n}\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after,\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after,\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] > .protyle-action::after {\n    display: table;\n}\n\n.protyle-wysiwyg .li[data-subtype=o] {\n    counter-increment: olcounter1;\n\n    & > .protyle-action::after {\n        content: counter(olcounter1, -moz-devanagari) \".\";\n        width: 200px;\n        right: 0;\n        color: violet;\n    }\n}\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] {\n    counter-increment: olcounter2;\n\n    & > .protyle-action::after {\n        content: counter(olcounter1, -moz-devanagari) \".\" counter(olcounter2, decimal);\n        color: red;\n    }\n}\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] {\n    counter-increment: olcounter3;\n\n    & > .protyle-action::after {\n        content: counter(olcounter1, decimal) \".\" counter(olcounter2, decimal) \".\" counter(olcounter3, decimal);\n        color: greenyellow;\n    }\n}\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] {\n    counter-increment: olcounter4;\n\n    & > .protyle-action::after {\n        content: counter(olcounter1, decimal) \".\" counter(olcounter2, decimal) \".\" counter(olcounter3, decimal) \".\" counter(olcounter4, decimal);\n        color: deepskyblue;\n    }\n}\n\n.protyle-wysiwyg .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] .li[data-subtype=o] {\n    counter-increment: olcounter5;\n\n    & > .protyle-action::after {\n        content: counter(olcounter1, decimal) \".\" counter(olcounter2, decimal) \".\" counter(olcounter3, decimal) \".\" counter(olcounter4, decimal) \".\" counter(olcounter5, decimal);\n        color: orange;\n    }\n}\n"
  },
  {
    "id": "20250816212926-0000018",
    "name": "markdown-photo",
    "type": "css",
    "enabled": true,
    "content": "/* 图片居中 */\n[data-type=\"img\"] {\n    width: 33%;\n    min-width: calc(100% - 0.1em);\n}\n\n/* 去除图片后的多余空行 CSS片段 */\n.b3-typography .img:not([style]), .protyle-wysiwyg .img:not([style]) {\n    display: inline-block;\n}\n"
  },
  {
    "id": "20250816212926-0000019",
    "name": "markdown-refference",
    "type": "css",
    "enabled": true,
    "content": ".bq[data-type=\"NodeBlockquote\"] > .p,\n.bq .p {\n    margin-left: 10px;\n}\n\ndiv.bq {\n    margin-bottom: 6px !important;\n    padding-bottom: 2px !important;\n}\n"
  },
  {
    "id": "20250816212926-0000020",
    "name": "markdown-table",
    "type": "css",
    "enabled": true,
    "content": ":is(.b3-typography,.protyle-wysiwyg) :is([data-node-id].table table), :is(.b3-typography,.protyle-wysiwyg) table {\n    margin-top: 12px;\n}\n\n.table .protyle-attr {\n    top: -6px;\n    font-size: 14px;\n}\n"
  },
  {
    "id": "20250816212926-0000021",
    "name": "markdown-title",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg .h1, .protyle-wysiwyg h1 {\n    margin-top: 0.3em;\n    text-align: center;\n    color: red;\n    border-bottom: 2px solid; /* 设置下边框的颜色和厚度 边框颜色设置为透明 */\n    border-color: transparent; /* 边框颜色设置为透明 */\n    border-image: linear-gradient(to right, #f00, #00f) 1; /* 设置渐变边框 */\n    border-radius: 0;\n}\n\n.protyle-wysiwyg .h2, .protyle-wysiwyg h2 {\n    color: #2091F6;\n    margin-top: 0.3em;\n}\n\n.protyle-wysiwyg .h3, .protyle-wysiwyg h3 {\n    color: #8694ff;\n    margin-top: 0.2em;\n}\n\n.protyle-wysiwyg .h4, .protyle-wysiwyg h4 {\n    color: #ffa54b;\n}\n\n.protyle-wysiwyg .h5, .protyle-wysiwyg h5 {\n    color: #9cfd57;\n}\n\n.protyle-wysiwyg .h6, .protyle-wysiwyg h6 {\n    color: #e7fd1a;\n}\n\n/* 超级块 h2 右移动一部分 */\n.sb > div.h2 {\n    text-align: center;\n}\n"
  },
  {
    "id": "20250816212926-0000022",
    "name": "markdown-siyuan-block_refenerce",
    "type": "css",
    "enabled": true,
    "content": ".protyle-wysiwyg [data-node-id] span[data-type~=block-ref]:not(.av__celltext), .protyle-wysiwyg [data-node-id] span[data-type~=file-annotation-ref] {\n    text-decoration-color: #2f89fd\n}\n"
  },
  {
    "id": "20250816212926-0000023",
    "name": "markdown-siyuan-database",
    "type": "css",
    "enabled": true,
    "content": "/* 隐藏除了特定数据库块的其他主键列 CSS片段 */\n/* author by JeffreyChen https://ld246.com/article/1728354035172 */\n/* 启用代码片段后，给需要保留主键的数据库块添加自定义属性：hide-hpk=false */\n.protyle-wysiwyg .av:not([custom-hpk=false]) [data-dtype=\"block\"] {\n    display: none;\n}\n\n.protyle-wysiwyg .av:not([custom-hpk=false]) .av__calc[data-dtype=\"block\"]:first-child + .av__calc {\n    padding-left: 1.625em;\n    box-sizing: initial;\n}\n\n/* 缩小显示标签 */\nspan.b3-chip {\n    margin-left: 2px !important;\n    font-size: 14px;\n}\n\n/* 表格内容右对齐 */\n.av__scroll .av__row .av__cell:not(.av__cell--header) {\n    text-align: right;\n}\n\n/* 抵消外部 Item 样式 */\ndiv.fn__flex.av__views > div.layout-tab-bar.fn__flex .item {\n    margin-bottom: 0;\n}\n\n\n/* 屏蔽列标题 类别图标 */\n.av__row--header .av__cellheadericon {\n    display: none;\n}\n"
  },
  {
    "id": "20250816212926-0000024",
    "name": "markdown-siyuan-super_block",
    "type": "css",
    "enabled": true,
    "content": "/* 二级超级块 添加边框 */\n\n.protyle-wysiwyg .sb {\n    margin: 4px 8px 8px 4px !important;\n\n\n    & .p {\n        margin-left: 10px;\n    }\n}\n\n.protyle-wysiwyg [data-node-id].sb[data-sb-layout=col] > div {\n    margin-right: 0;\n}\n"
  },
  {
    "id": "20250816212926-0000025",
    "name": "miscellaneous-plugin",
    "type": "css",
    "enabled": true,
    "content": ".self_cloud {\n    width: 450px;\n    height: 35px;\n}\n"
  },
  {
    "id": "20250816212926-0000026",
    "name": "miscellaneous-search",
    "type": "css",
    "enabled": true,
    "content": "#searchList [data-type=search-item] .b3-list-item__meta--ellipsis, #searchUnRefList [data-type=search-item] .b3-list-item__meta--ellipsis, #searchAssetList [data-type=search-item] .b3-list-item__meta--ellipsis {\n    max-width: calc(100% - 22px);\n    padding: 6px 0 8px 8px;\n    line-height: 1;\n    float: right;\n    right: 0;\n    bottom: 12px;\n    color: #78dfff;\n}\n\n#searchList [data-type=search-item] .b3-list-item__text, #searchUnRefList [data-type=search-item] .b3-list-item__text, #searchAssetList [data-type=search-item] .b3-list-item__text {\n    line-height: 1;\n    -webkit-line-clamp: 1;\n    display: contents;\n}\n\n#searchList [data-type=search-item], #searchUnRefList [data-type=search-item], #searchAssetList [data-type=search-item] {\n    flex-wrap: wrap;\n    padding: 4px;\n    display: flow-root;\n    justify-content: none;\n}\n\n/* 匹配选中颜色 */\n@supports (color: oklch(from red clamp(0, l * 0.5, 0.3) 0 h)) {\n    [data-theme-mode=dark] body:not(.has-exportimg) .protyle-wysiwyg [data-node-id] span[data-type~=search-mark].search-mark--hl {\n        box-shadow: 0 0 0 0.5px color(srgb 0 0.97 0.53), 0 13px 25px -2px color(srgb 0.08 0.83 0.53 / 0.4), 0 0 10px 0 rgb(from var(--b3-theme-accent) r g b / 0.2);\n    }\n}\n\n@supports (color: oklch(from red clamp(0, l * 0.5, 0.3) 0 h)) {\n    body:not(.has-exportimg) .protyle-wysiwyg [data-node-id] span[data-type~=search-mark].search-mark--hl {\n        background-color: oklch(0.73 0.22 149.52 / 0.38) !important;\n        box-shadow: 0 0 0 1px rgb(from var(--b3-theme-accent) r g b / 0.075), 0 13px 25px -2px rgb(from var(--b3-theme-accent) r g b / 0.075), 0 0 10px 0 rgb(from var(--b3-theme-accent) r g b / 0.075);\n    }\n}\n"
  },
  {
    "id": "20250816212926-0000027",
    "name": "pop_window-color_choice",
    "type": "css",
    "enabled": true,
    "content": ".protyle-util [style*=\"color:var(--b3-font-color\"] {\n    font-size: 1.5em;\n    background: #00000000;\n    border: none;\n}\n\n/* 清除字体颜色的 box 样式 */\n.color__square,\n.color__square:hover {\n    box-shadow: 0 0 0 0 inset var(--b3-border-color-trans);\n}\n\n/* 去除无用的按钮 */\n.protyle-util .protyle-font > div:nth-child(n+5):nth-child(-n+8),\n.protyle-util .protyle-font > div:nth-child(n+17):nth-child(-n+20) {\n    display: none;\n}\n\n/*字号选择*/\n.protyle-util .protyle-font > div:nth-child(21) {\n    display: inline;\n    font-size: 16px;\n    position: relative;\n    top: 3px;\n    left: 5px;\n\n    & label {\n        display: inline;\n        float: right;\n    }\n}\n\n/*清除样式*/\n.protyle-util .protyle-font > div:nth-child(24) {\n    & button {\n        width: 100%;\n        text-align: center;\n        right: -3px;\n    }\n\n\n    & svg {\n        display: none;\n    }\n}\n\n\ndiv.protyle-util .protyle-font > div:nth-child(23),\ndiv.protyle-util .protyle-font > div:nth-child(25) {\n    display: inline !important;\n    width: 120px;\n}\n\ndiv.protyle-util .protyle-font > div:nth-child(23) > select {\n    width: 120px;\n    margin-right: 4em;\n}\n\n.protyle-util .protyle-font {\n    max-width: none;\n}\n\n.protyle-font .b3-button {\n    border-radius: 7px;\n    padding: 4px 9px;\n    color: var(--b3-theme-on-background);\n    outline: 1px solid rgb(from var(--b3-theme-on-background) r g b / 0.2);\n    display: inline;\n    width: 103px;\n    position: relative;\n    right: 38px;\n    text-align: right;\n    font-size: 16px;\n}\n\n/* 清除样式历史记录优化 */\n.protyle-font .b3-button svg {\n    top: 6px;\n    position: absolute;\n    left: 10px;\n}\n\nbutton.protyle-font__style[data-type=\"clear\"] {\n    font-size: 0;\n    line-height: 0;\n}\n\n.protyle-font > div:nth-child(15) > button::before,\n.protyle-font > div:nth-child(3) > button[aria-label=\"背景颜色\"]::before {\n    content: \"A\";\n}\n"
  },
  {
    "id": "20250816212926-0000028",
    "name": "pop_window-emoji",
    "type": "css",
    "enabled": true,
    "content": "/*  这段代码会导致上下键失效 暂时无解决方法 先弃用\n.emojis__title[data-type=\"0\"],\n.emojis__title[data-type=\"1\"],\n.emojis__title[data-type=\"0\"] + div {\n    display: none;\n}\n*/\n\n/* 选中表情 背景颜色 定位当前表情 */\n.emojis__item--current, .emojis__item:hover {\n    background: #6aace7 !important;\n}\n\n/* 单个表情框的圆角 */\n.emojis__item {\n    border-radius: 6px;\n}\n"
  },
  {
    "id": "20250816212926-0000029",
    "name": "pop_window-slash_menu",
    "type": "css",
    "enabled": true,
    "content": "/* /菜单弹出框 搜索后第一个元素 取消margin-top */\n.protyle-hint.b3-list.b3-list--background.hint--menu > div > button:nth-child(1),\n.protyle-hint.b3-list.b3-list--background.hint--menu .b3-menu__separator + button .b3-list-item__first {\n    margin-top: 0;\n    border-top: 0.1px solid; /* 设置下边框的厚度 */\n    border-color: transparent; /* 边框颜色设置为透明 */\n    border-radius: 0;\n    line-height: 27px;\n}\n\n.protyle-hint.b3-list.b3-list--background.hint--menu > div > button {\n    margin-left: 6px;\n    margin-right: 0;\n}\n\n.protyle-hint.b3-list.b3-list--background.hint--menu .b3-menu__separator {\n    display: none;\n}\n"
  },
  {
    "id": "20250816212926-0000030",
    "name": "sidebar-filetree",
    "type": "css",
    "enabled": true,
    "content": "/* 设置文档树字体大小 */\n.file-tree.fn__flex-1 {\n    font-size: 12px;\n}\n\n/* 隐藏: 文档树->文档->图标\n/* .file-tree>.fn__flex-1>ul>li>span.b3-list-item__icon.b3-tooltips.b3-tooltips__e {display:contents;} 显示第一层的图标*/\n.file-tree > .fn__flex-1 ul > li > span.b3-list-item__icon {\n    display: none;\n}\n\n/* 隐藏: 文档树->笔记本->更多设置按钮 */\n.file-tree > .fn__flex-1 > ul > li > span[data-type=\"more-root\"] {\n    display: none !important;\n}\n\n/* 隐藏: 文档树->文档-> 更多设置按钮 */\n.file-tree > .fn__flex-1 ul > li > span[data-type=\"more-file\"] {\n    display: none !important;\n}\n\n/* 隐藏: 文档树->文档->文档被引用个数 */\n.file-tree .popover__block {\n    display: hidden !important;\n}\n\n/* 隐藏文档树缩进线 */\n.file-tree > .fn__flex-1 ul {\n    background-image: none !important;\n}\n\n/*.file-tree > .fn__flex-1 {\n    --indent-color-inactive: none;\n    --indent-color-active: none;\n}*/\n\n/* [CSS片段] 文档树压缩  */\n:root {\n    /* 22, 40, 58, 76, 94, 112, 130 */\n    --level-tree-compress-scale: 0.01;\n    --level-tree-compress-0: 2px;\n    --level-tree-compress-spacing: 1px;\n    --level-tree-compress-spacing-res: calc(var(--level-tree-compress-spacing) * var(--level-tree-compress-scale));\n\n    --level-tree-compress-2: calc(var(--level-tree-compress-0) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-3: calc(var(--level-tree-compress-2) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-4: calc(var(--level-tree-compress-3) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-5: calc(var(--level-tree-compress-4) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-6: calc(var(--level-tree-compress-5) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-7: calc(var(--level-tree-compress-6) + var(--level-tree-compress-spacing-res));\n    --level-tree-compress-8: calc(var(--level-tree-compress-7) + var(--level-tree-compress-spacing-res));\n\n    --file-tree-margin-left: 7px;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-2) !important;\n    margin-left: var(--level-tree-compress-2) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-3) !important;\n    margin-left: var(--level-tree-compress-3) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-4) !important;\n    margin-left: var(--level-tree-compress-4) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-5) !important;\n    margin-left: var(--level-tree-compress-5) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-6) !important;\n    margin-left: var(--level-tree-compress-6) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-7) !important;\n    margin-left: var(--level-tree-compress-7) !important;\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul > li > span.b3-list-item__toggle {\n    padding-left: var(--level-tree-compress-8) !important;\n    margin-left: var(--level-tree-compress-8) !important;\n}\n\n/* 文档树 目录间隔 */\n.file-tree .b3-list-item {\n    line-height: 20px;\n    min-height: 14px;\n    padding: 0 2px;\n    margin: 0 0;\n}\n\n/* 文档树 每一级设置 */\n.file-tree .fn__flex-1 > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree .fn__flex-1 > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n\n.file-tree > .fn__flex-1 > ul > ul > ul > ul > ul > ul > ul > ul > ul {\n    margin-left: var(--file-tree-margin-left);\n}\n"
  },
  {
    "id": "20250816212926-0000031",
    "name": "sidebar-main",
    "type": "css",
    "enabled": true,
    "content": "#protyle-sidebar {\n    top: 108px;\n}\n\n/* 选中高亮 */\n.b3-list-item--focus .ariaLabel {\n    color: #00fd00 !important;\n}\n\n/* 选择父元素高亮 */\nli:has(+ ul .b3-list-item--focus) .b3-list-item__text {\n    color: red !important;\n    font-weight: 600 !important;\n}\n\n/* 缩小最外面的左边距 */\n.fn__flex.fn__flex-1 .b3-list-item {\n    margin-left: 0;\n}\n"
  },
  {
    "id": "20250816212926-0000032",
    "name": "sidebar-outline",
    "type": "css",
    "enabled": true,
    "content": "/* 显示标题 */\n.sy__outline .b3-list-item[title] {\n    display: inherit;\n}\n\n/* 字体 大小 清晰度 */\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h1] .b3-list-item__text::before,\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h2] .b3-list-item__text::before,\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h3] .b3-list-item__text::before,\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h4] .b3-list-item__text::before,\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h5] .b3-list-item__text::before,\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h6] .b3-list-item__text::before {\n    font-size: 14px !important;\n    opacity: 1;\n    font-family: 'yahei consolas hybrid', 'ibm plex mono', serif;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h1] .b3-list-item__text::before {\n    content: \"⓵\";\n    color: red;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h2] .b3-list-item__text::before {\n    content: \"𝟮\";\n    color: #0087ff;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h3] .b3-list-item__text::before {\n    content: \"𝟯\";\n    color: #8694ff;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h4] .b3-list-item__text::before {\n    content: \"𝟒\";\n    color: #ffa54b;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h5] .b3-list-item__text::before {\n    content: \"𝟓\";\n    color: #9cfd57;\n}\n\n.sy__outline .b3-list-item[data-type=NodeHeading][data-subtype=h6] .b3-list-item__text::before {\n    content: \"⒍\";\n    color: #e7fd1a;\n}\n"
  },
  {
    "id": "20250816212926-0000033",
    "name": "-block_ctrl_w_close_pin_tab",
    "type": "js",
    "enabled": true,
    "content": "// see https://ld246.com/article/1723109908986\n(() => {\n  // 注入样式，模拟激活标签的样式，可根据自己的样式进行调整\n  addStyle(`\n        .layout__wnd--active .layout-tab-bar .item--pin--focus:after {\n            background-color: var(--b3-theme-primary);\n        }\n        .layout-tab-bar .item--pin--focus:after {\n            content: \"\";\n            width: 100%;\n            height: 3px;\n            border-radius: var(--b3-border-radius);\n            bottom: 0;\n            position: absolute;\n            background-color: var(--b3-theme-background-light);\n        }\n    `);\n\n  // 是否在最近打开文档对话框中，将钉住标签移动到当前焦点的下面，默认不移动，改为true时则移动\n  const isMovePinTabToFocusNextInRecentlyDialog = true;\n\n  // 是否在标签切换对话框中，将钉住标签移动到当前焦点的下面，默认不移动，改为true时则移动\n  const isMovePinTabToFocusNextInTabSwitchDialog = true;\n\n  //////////////// 以下代码，不涉及样式调整，非必要勿动 //////////////////////\n\n  // 等待标签页容器渲染完成后开始监听\n  whenElementExist('.layout__center').then(async element => {\n    // 记录按键前的数据状态\n    let originalValues = {};\n\n    // 当按ctrl+w时，临时修改item--focus为item--pin--focus\n    document.addEventListener('keydown', function (event) {\n      if ((event.ctrlKey || event.metaKey) && event.key === 'w') {\n        // 临时修改item--focus为item--pin--focus\n        const focusPinTab = element.querySelector('.layout-tab-bar .item--pin.item--focus');\n        if (focusPinTab) {\n          focusPinTab.classList.remove('item--focus');\n          focusPinTab.classList.add('item--pin--focus');\n        }\n\n        // 临时修改activetime为0，值为0可以避免被获得焦点\n        if (Object.keys(originalValues).length === 0) {\n          const items = element.querySelectorAll('.layout-tab-bar .item--pin');\n          let maxActivetimeItem = null;\n          let maxActivetime = 0;\n          items.forEach(item => {\n            originalValues[item.getAttribute(\"data-id\")] = item.dataset.activetime;\n            if (item.dataset.activetime > maxActivetime) {\n              maxActivetime = item.dataset.activetime;\n              maxActivetimeItem = item;\n            }\n            item.dataset.activetime = 0;\n          });\n          // 把最后激活的文档设为下一个焦点\n          if (maxActivetimeItem) maxActivetimeItem.dataset.activetime = 1;\n        }\n      }\n    }, {capture: true});\n\n    // 当按释放按键是，恢复item--pin--focus为item--focus\n    document.addEventListener('keyup', function (event) {\n      // 恢复item--pin--focus为item--focus\n      const focusPinTab = element.querySelector('.layout-tab-bar .item--pin.item--pin--focus');\n      if (focusPinTab) {\n        focusPinTab.classList.remove('item--pin--focus');\n        focusPinTab.classList.add('item--focus');\n      }\n\n      // 恢复activetime的值\n      if (Object.keys(originalValues).length > 0) {\n        const items = element.querySelectorAll('.layout-tab-bar .item--pin');\n        items.forEach(item => {\n          if (item.dataset.activetime <= 1) item.dataset.activetime = originalValues[item.getAttribute(\"data-id\")];\n        });\n        //清空originalValues\n        Object.keys(originalValues).forEach(key => {\n          delete originalValues[key];\n        });\n      }\n    }, true);\n\n    // 监听最近打开文档 和 页签切换\n    if (isMovePinTabToFocusNextInRecentlyDialog || isMovePinTabToFocusNextInTabSwitchDialog) {\n      observeDialogShow((node, dialog) => {\n        // 监听最近打开文档\n        if (dialog === 'dialog-recentdocs') {\n          // 获取所有钉住的标签\n          const pinTabNodeIds = getAllPinTabNodeIds();\n          // 把所有最近文档的钉住标签，移动到当前焦点的下面\n          movePinTabItemToFocusTabNext(node, pinTabNodeIds);\n        }\n        // 监听页签切换\n        if (dialog === 'dialog-switchtab') {\n          // 获取所有钉住的标签\n          const pinTabNodeIds = getAllPinTabNodeIds();\n          // 把所有最近文档的钉住标签，移动到当前焦点的下面\n          movePinTabItemToFocusTabNext(node, pinTabNodeIds);\n        }\n      });\n    }\n\n  });\n\n  // 获取所有的指定标签的nodeId\n  function getAllPinTabNodeIds() {\n    const pinTabs = document.querySelectorAll(\".layout__center .layout-tab-bar li.item--pin\");\n    let pinTabNodeIds = [];\n    pinTabs.forEach(pin => {\n      let initData = pin.getAttribute(\"data-initdata\");\n      if (initData) {\n        // 初始化时的数据\n        initData = JSON.parse(initData);\n        if (initData && initData.blockId) {\n          pinTabNodeIds.push(initData.blockId);\n        }\n      } else {\n        // 内容加载后的数据\n        const dataId = pin.getAttribute(\"data-id\");\n        const parents = pin.closest(\"div.fn__flex\");\n        const nodeId = parents?.nextElementSibling?.querySelector('div[data-id=\"' + dataId + '\"] .protyle-breadcrumb__item svg.popover__block')?.getAttribute(\"data-id\");\n        if (nodeId) {\n          pinTabNodeIds.push(nodeId);\n        }\n      }\n    });\n    return pinTabNodeIds;\n  }\n\n  // 移动最近打开文档或文档切换列表的node-id在pinTabNodeIds中的元素到当前焦点的下面\n  async function movePinTabItemToFocusTabNext(node, pinTabNodeIds) {\n    let ulElement = null;\n    let focusElement = null;\n    await whenElementExist(() => {\n      ulElement = node.querySelector(\"ul.b3-list--background.fn__flex-1\");\n      focusElement = ulElement?.querySelector(\"li.b3-list-item--focus\");\n      return ulElement && focusElement;\n    });\n    pinTabNodeIds.reverse();\n    // 遍历 pinTabNodeIds 数组\n    pinTabNodeIds.forEach(nodeId => {\n      // 查找具有相应 data-node-id 的 li 元素\n      const item = ulElement.querySelector(`li[data-node-id=\"${nodeId}\"]`);\n      if (item) {\n        // 将 item 插入到 focusElement 后面\n        focusElement.parentElement.insertBefore(item, focusElement.nextSibling);\n      }\n    });\n  }\n\n  // 监听对话框\n  function observeDialogShow(callback) {\n    // 创建 MutationObserver 实例\n    const observer = new MutationObserver((mutationsList) => {\n      for (let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n          // 遍历新增的子元素\n          for (let node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() === 'div') {\n              if (node.hasAttribute('data-key') && node.getAttribute('data-key') === 'dialog-recentdocs') {\n                if (typeof callback === 'function') callback(node, 'dialog-recentdocs');\n              }\n              if (node.hasAttribute('data-key') && node.getAttribute('data-key') === 'dialog-switchtab') {\n                if (typeof callback === 'function') callback(node, 'dialog-switchtab');\n              }\n            }\n          }\n        }\n      }\n    });\n    // 配置 MutationObserver\n    const config = {\n      childList: true,\n    };\n    // 开始观察 body 的子元素\n    observer.observe(document.body, config);\n    // observer.disconnect()\n  }\n\n  // 延迟执行\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // 等待元素渲染完成后执行\n  function whenElementExist(selector) {\n    return new Promise(resolve => {\n      const checkForElement = () => {\n        let element = null;\n        if (typeof selector === 'function') {\n          element = selector();\n        } else {\n          element = document.querySelector(selector);\n        }\n        if (element) {\n          resolve(element);\n        } else {\n          requestAnimationFrame(checkForElement);\n        }\n      };\n      checkForElement();\n    });\n  }\n\n  // 注入样式\n  function addStyle(styleContent) {\n    // 获取现有的 <style> 标签\n    let styleTag = document.head.querySelector('ctrl-w-not-close-tab-style');\n    // 如果已存在 <style> 标签\n    if (styleTag) {\n      // 删除已存在的 <style> 标签\n      styleTag.parentNode.removeChild(styleTag);\n    }\n    // 创建新的 <style> 标签\n    styleTag = document.createElement('style');\n    styleTag.textContent = styleContent;\n    // 将新的 <style> 标签添加到文档头部\n    document.head.appendChild(styleTag);\n  }\n})();\n"
  },
  {
    "id": "20250816212926-0000034",
    "name": "-change_link_to_mode",
    "type": "js",
    "enabled": true,
    "content": "(() => {\n  const style = document.createElement('style');\n  style.type = 'text/css';\n  style.innerHTML = 'span[data-type=\"url\"] { pointer-events: none; }';\n\n  let controlPressed = false;\n\n  document.addEventListener('keydown', (event) => {\n    if (event.key.toLowerCase() === 'control' && !controlPressed) {\n      controlPressed = true;\n      style.remove();\n    }\n  });\n\n  document.addEventListener('keyup', (event) => {\n    if (event.key.toLowerCase() === 'control' && controlPressed) {\n      controlPressed = false;\n      document.body.appendChild(style);\n    }\n  });\n\n  document.body.appendChild(style);\n})();\n"
  },
  {
    "id": "20250816212926-0000035",
    "name": "-collapse_code",
    "type": "js",
    "enabled": true,
    "content": "// 代码块添加折叠/展开/全屏/悬浮横向滚动条\n// see https://ld246.com/article/1744373698945\n// 支持在块上添加auto-height自定义属性，使块不受最大高度限制\n// version 0.0.5\n// 0.0.1 支持代码块的折叠和展开，全屏和悬浮横向滚动条\n// 0.0.2 美化滚动条样式\n// 0.0.3 修复全屏后代码块显示不全问题\n// 0.0.4 改进仅代码块有滚动条且内容高度大于codeMaxHeight时才显示\n// 0.0.5 修复新建代码块不会立刻出现折叠扩展箭头\n(() => {\n  // 当代码块内容最大高度，注意：这里的高度是指.hljs元素的高度，默认是500px\n  // 支持在块上添加auto-height自定义属性，使块不受最大高度限制\n  const codeMaxHeight = '500px';\n\n  // 是否显示全屏按钮 true 显示 false 不显示\n  const isEnableFullscreen = false;\n\n  // 是否显示模拟滚动条 true 显示 false 不显示\n  // 该功能在代码块底部超出可视区域时自动在底部显示滚动条\n  const isEnableScrollbar = false;\n\n  // 不支持手机版（因为手机版不需要）\n  if (isMobile()) return;\n\n  // 添加样式\n  addStyle(`\n        .b3-typography div.hljs, .protyle-wysiwyg .code-block:not([custom-auto-height]) div.hljs {\n            max-height: ${codeMaxHeight || '500px'};\n        }\n        .b3-typography .code-block:not(pre), .protyle-wysiwyg .code-block:not(pre){\n            margin: 2px 0; padding: 4px;\n        }\n        .b3-typography div.hljs, .protyle-wysiwyg div.hljs{\n                padding: 0.65em 1em 1.6em;\n        }\n        .b3-typography div.protyle-action, .protyle-wysiwyg .code-block div.protyle-action {\n            position: sticky;\n        }\n        /* 全屏背景色 */\n        :not(:root):fullscreen::backdrop {\n            background-color: var(--b3-theme-background);\n        }\n        /* 模拟滚动条容器 */\n        .scrollbar-container {\n          position: sticky;\n          bottom: 0;\n          width: 100%;\n          height: 8px;\n          /*background-color: #ddd;*/\n          cursor: pointer;\n          border-radius: 5px;\n          /*transition: opacity 0.3s ease;*/\n          z-index: ${++siyuan.zIndex || 9999};\n        }\n        /* 滚动条滑块 */\n        .scrollbar-thumb {\n          position: absolute;\n          top: 0;\n          left: 0;\n          height: 100%;\n          width: 20%; /* 初始滑块宽度 */\n          /*background-color: var(--b3-scroll-color);*/ /* light #C2C3C3 dark #4E4F58 */\n          box-shadow: inset 0 0 5px 5px var(--b3-scroll-color);\n          border-radius: 5px;\n          cursor: grab;\n        }\n        .scrollbar-container.f__hidden {\n          opacity: 0; /* 隐藏元素 */\n          pointer-events: none; /* 禁用鼠标交互 */\n          height: 0;\n        }\n    `);\n\n  // 监听代码块被加载\n  whenElementExist('.layout__center, #editor').then(async el => {\n    // 加载时执行（静态加载）\n    let protyle;\n    await whenElementExist(() => {\n      protyle = el.querySelector('.protyle');\n      return protyle && protyle?.dataset?.loading === 'finished';\n    });\n    addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n    // 滚动时执行\n    protyle.querySelector(\".protyle-content\").addEventListener('scroll', () => {\n      addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n    });\n\n    // 监听protyle加载事件（动态加载）\n    observeProtyleLoaded(el, protyles => {\n      protyles.forEach(async protyle => {\n        if (!protyle.classList.contains('protyle')) {\n          protyle = protyle.closest('.protyle');\n        }\n        // 加载时执行\n        addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n\n        // 滚动时执行\n        protyle.querySelector(\".protyle-content\").addEventListener('scroll', () => {\n          addCodeExtends(protyle.querySelectorAll('.code-block:not(:has(.protyle-icon--expand))'), protyle);\n        });\n      });\n    });\n  });\n\n  // 添加扩展按钮\n  let runing = false;\n  function addCodeExtends(codeBlocks, protyle) {\n    if (codeBlocks.length === 0) return;\n    if (runing) return;\n    runing = true;\n    setTimeout(() => { runing = false; }, 500);\n    codeBlocks.forEach(async code => {\n      if (code.querySelector('.protyle-icon--expand')) return;\n\n      // 添加折叠按钮\n      const hljs = code.querySelector('.hljs');\n      if (!hljs) return;\n      let expandStatus = getExpandStatus(hljs);\n      const ariaLabel = getAriaLabelText(expandStatus);\n      const expandBtnHtml = `<span class=\"b3-tooltips__nw b3-tooltips protyle-icon protyle-icon--expand protyle-action__expand protyle-custom\" aria-label=\"${ariaLabel}\"><svg><use xlink:href=\"#${expandStatus}\"></use></svg></span>`;\n      const moreBtn = code.querySelector('.protyle-icon--last');\n      if (!moreBtn) return;\n      await whenElementExist(() => moreBtn.getAttribute('aria-label'));\n      moreBtn.insertAdjacentHTML('beforebegin', expandBtnHtml);\n      const expandBtn = code.querySelector('.protyle-icon--expand');\n      expandBtn.addEventListener('click', () => {\n        expandStatus = getExpandStatus(hljs);\n        if (expandStatus === 'iconDown') {\n          hljs.style.maxHeight = 'none';\n          expandStatus = 'iconUp';\n        } else {\n          hljs.style.maxHeight = codeMaxHeight;\n          expandStatus = 'iconDown';\n        }\n        const useEl = expandBtn.querySelector('svg > use');\n        useEl.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' + expandStatus);\n        const ariaLabel = getAriaLabelText(expandStatus);\n        expandBtn.setAttribute('aria-label', ariaLabel);\n      });\n\n      // 添加全屏按钮\n      if (!isEnableFullscreen) return;\n      if (code.querySelector('.protyle-icon--fullscreen')) return;\n      let fullscreenAriaLabel = '全屏';\n      let fullscreenStatus = 'iconFullscreen';\n      const fullscreenBtnHtml = `<span class=\"b3-tooltips__nw b3-tooltips protyle-icon protyle-icon--fullscreen protyle-action__fullscreen protyle-custom\" aria-label=\"${fullscreenAriaLabel}\"><svg><use xlink:href=\"#${fullscreenStatus}\"></use></svg></span>`;\n      expandBtn.insertAdjacentHTML('beforebegin', fullscreenBtnHtml);\n      const fullscreenBtn = code.querySelector('.protyle-icon--fullscreen');\n      let oldCodeMaxHeight;\n      fullscreenBtn.addEventListener('click', () => {\n        if (fullscreenStatus === 'iconFullscreen') {\n          oldCodeMaxHeight = hljs.style.maxHeight;\n          requestFullScreen(code);\n          fullscreenStatus = 'iconFullscreenExit';\n          fullscreenAriaLabel = '退出全屏';\n          hljs.style.maxHeight = 'calc(100vh - 58px)';\n          expandBtn.style.display = 'none';\n          if (scrollbarContainer) scrollbarContainer.classList.add('f__hidden');\n        } else {\n          exitFullScreen(code);\n          fullscreenStatus = 'iconFullscreen';\n          fullscreenAriaLabel = '全屏';\n          if (oldCodeMaxHeight !== undefined) hljs.style.maxHeight = oldCodeMaxHeight;\n          expandBtn.style.display = '';\n          setTimeout(() => {\n            if (scrollbarContainer) scrollbarContainer.classList.add('f__hidden');\n          }, 300);\n        }\n        const useEl = fullscreenBtn.querySelector('svg > use');\n        useEl.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' + fullscreenStatus);\n        fullscreenBtn.setAttribute('aria-label', fullscreenAriaLabel);\n      });\n\n      // 添加模拟滚动条\n      if (!isEnableScrollbar) return;\n      if (code.querySelector('.scrollbar-container')) return;\n      const scrollbarHtml = `<div class=\"scrollbar-container protyle-custom\"><div class=\"scrollbar-thumb\"></div></div>`;\n      code.insertAdjacentHTML('beforeend', scrollbarHtml);\n      const scrollbarContainer = code.querySelector('.scrollbar-container');\n      const protyleContent = protyle.querySelector(\".protyle-content\");\n\n      // 检查是否需要显示模拟滚动条\n      function checkScrollbarVisibility() {\n        const hasHorizontalScrollbar = hljs.scrollWidth > hljs.clientWidth; // 是否有横向滚动条\n        const isHeightExceeded = hljs.scrollHeight > parseHeightToPixels(codeMaxHeight); // 高度是否超过codeMaxHeight\n        const isSticky = !isElementBottomInViewport(code); // 是否处于 sticky 状态\n\n        if (hasHorizontalScrollbar && isHeightExceeded && isSticky) {\n          scrollbarContainer.classList.remove('f__hidden'); // 显示模拟滚动条\n        } else {\n          scrollbarContainer.classList.add('f__hidden'); // 隐藏模拟滚动条\n        }\n      }\n\n      // 初始化滚动条状态\n      checkScrollbarVisibility();\n\n      // 监听 protyleContent 的滚动事件\n      protyleContent.addEventListener('scroll', () => {\n        checkScrollbarVisibility();\n      });\n\n      // 模拟滚动条滚动\n      const scrollbarThumb = code.querySelector(\".scrollbar-thumb\");\n      let isDragging = false; // 是否正在拖动\n      let startX, thumbStartX; // 鼠标按下时的初始位置\n\n      // 计算滑块宽度和滚动比例\n      function updateScrollbar() {\n        const contentWidth = hljs.scrollWidth;\n        const viewportWidth = hljs.clientWidth;\n        let thumbWidth = (viewportWidth / contentWidth) * scrollbarContainer.offsetWidth;\n        // 边界值处理\n        thumbWidth = Math.max(thumbWidth, 10); // 最小宽度为10px\n        scrollbarThumb.style.width = `${thumbWidth}px`;\n      }\n\n      // 同步滚动条位置\n      function syncScrollbarPosition() {\n        const scrollPercentage = hljs.scrollLeft / (hljs.scrollWidth - hljs.clientWidth);\n        const thumbMaxMove = scrollbarContainer.offsetWidth - scrollbarThumb.offsetWidth;\n        scrollbarThumb.style.left = `${scrollPercentage * thumbMaxMove}px`;\n      }\n\n      // 初始化滚动条\n      updateScrollbar();\n      syncScrollbarPosition();\n\n      // 监听 .code-block 的滚动事件\n      hljs.addEventListener(\"scroll\", () => {\n        syncScrollbarPosition();\n      });\n\n      // 模拟滚动条拖动逻辑\n      scrollbarThumb.addEventListener(\"mousedown\", (e) => {\n        isDragging = true;\n        startX = e.clientX;\n        thumbStartX = parseFloat(scrollbarThumb.style.left) || 0;\n        // 禁用文本选择\n        hljs.style.userSelect = \"none\";\n        // 绑定全局事件\n        document.addEventListener(\"mousemove\", handleMouseMove);\n        document.addEventListener(\"mouseup\", handleMouseUp);\n        // 阻止默认行为\n        e.preventDefault();\n      });\n\n      function handleMouseMove(e) {\n        if (!isDragging) return;\n        const deltaX = e.clientX - startX;\n        const thumbMaxMove = scrollbarContainer.offsetWidth - scrollbarThumb.offsetWidth;\n        let newThumbPosition = thumbStartX + deltaX;\n        // 限制滑块范围\n        newThumbPosition = Math.max(0, Math.min(newThumbPosition, thumbMaxMove));\n        scrollbarThumb.style.left = `${newThumbPosition}px`;\n        // 同步 .code-block 的滚动位置\n        const scrollPercentage = newThumbPosition / thumbMaxMove;\n        hljs.scrollLeft = scrollPercentage * (hljs.scrollWidth - hljs.clientWidth);\n        // 阻止默认行为\n        e.preventDefault();\n      }\n\n      function handleMouseUp() {\n        isDragging = false;\n        // 恢复文本选择\n        hljs.style.userSelect = \"\";\n        // 移除全局事件\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      }\n\n      // 监听窗口大小变化\n      window.addEventListener(\"resize\", () => {\n        checkScrollbarVisibility();\n        updateScrollbar();\n        syncScrollbarPosition();\n      });\n    });\n  }\n\n  function requestFullScreen(element) {\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) { // Firefox\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) { // Chrome, Safari, Opera\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) { // IE/Edge\n      element.msRequestFullscreen();\n    }\n  }\n\n  function exitFullScreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) { // Firefox\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) { // Chrome, Safari, Opera\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) { // IE/Edge\n      document.msExitFullscreen();\n    }\n  }\n\n  function getAriaLabelText(expandStatus) {\n    return expandStatus === 'iconDown' ? '展开' : '折叠';\n  }\n\n  function getExpandStatus(hljs) {\n    return getComputedStyle(hljs, null)?.maxHeight === codeMaxHeight ? 'iconDown' : 'iconUp';\n  }\n\n  function addStyle(css) {\n    // 创建一个新的style元素\n    const style = document.createElement('style');\n    // 设置CSS规则\n    style.innerHTML = css;\n    // 将style元素添加到<head>中\n    document.head.appendChild(style);\n  }\n\n  function observeProtyleLoaded(el, callback) {\n    const config = { attributes: false, childList: true, subtree: true };\n    const observer = new MutationObserver((mutationsList, observer) => {\n      mutationsList.forEach(mutation => {\n        if (mutation.type === 'childList') {\n          // 查找新增加的 NodeCodeBlock 元素\n          const protyles = Array.from(mutation.addedNodes).filter(node =>\n            node.nodeType === Node.ELEMENT_NODE &&\n            (node.classList.contains('protyle') || node.classList.contains('protyle-content'))\n          );\n          // 如果找到了这样的元素，则调用回调函数\n          if (protyles.length > 0) {\n            callback(protyles);\n          }\n\n          // 监听代码块node被创建\n          const codeBlocks = Array.from(mutation.addedNodes).filter(node =>\n            node.nodeType === Node.ELEMENT_NODE &&\n            (node.matches('.code-block:not(:has(.protyle-icon--expand))'))\n          );\n          if (codeBlocks.length > 0) {\n            addCodeExtends(codeBlocks, codeBlocks[0].closest('.protyle'));\n          }\n        }\n      });\n    });\n    // 开始观察 body 下的所有变化\n    observer.observe(el, config);\n    // 当不再需要观察时可调用断开来停止观察\n    return () => {\n      observer.disconnect();\n    };\n  }\n\n  // 等待元素渲染完成后执行\n  function whenElementExist(selector, node) {\n    return new Promise(resolve => {\n      const check = () => {\n        const el = typeof selector === 'function' ? selector() : (node || document).querySelector(selector);\n        if (el) resolve(el); else requestAnimationFrame(check);\n      };\n      check();\n    });\n  }\n\n  function isMobile() {\n    return !!document.getElementById(\"sidebar\");\n  }\n\n  function isElementBottomInViewport(el) {\n    if (!el) return false; // 如果元素不存在，直接返回 false\n    const rect = el.getBoundingClientRect(); // 获取元素的边界信息\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n    // 判断元素的底部是否在视口内\n    return rect.bottom <= windowHeight;\n  }\n\n  // 通过字符串解析实际高度，缓存对象 (作为函数属性)\n  function parseHeightToPixels(value) {\n    // 静态缓存对象 (函数属性)\n    if (!parseHeightToPixels.memo) {\n      parseHeightToPixels.memo = {};\n    }\n\n    // 1. 数字类型直接返回\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    // 2. 检查缓存\n    if (parseHeightToPixels.memo.hasOwnProperty(value)) {\n      return parseHeightToPixels.memo[value];\n    }\n\n    // 3. 处理 px 单位或纯数字字符串\n    if (typeof value === 'string') {\n      // 3.1 纯数字字符串 (如 '500')\n      if (/^\\d+\\.?\\d*$/.test(value)) {\n        const num = parseFloat(value);\n        parseHeightToPixels.memo[value] = num;\n        return num;\n      }\n\n      // 3.2 px 单位字符串 (如 '500px' 或 '300.5px')\n      if (value.toLowerCase().endsWith('px')) {\n        const num = parseFloat(value);\n        parseHeightToPixels.memo[value] = num;\n        return num;\n      }\n    }\n\n    // 4. 其他单位需要 DOM 计算\n    const tempDiv = document.createElement('div');\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.visibility = 'hidden';\n    tempDiv.style.height = value;\n    tempDiv.style.left = '-9999px';\n\n    document.body.appendChild(tempDiv);\n    const heightInPixels = parseFloat(getComputedStyle(tempDiv).height);\n    document.body.removeChild(tempDiv);\n\n    // 存入缓存\n    parseHeightToPixels.memo[value] = heightInPixels;\n    return heightInPixels;\n  }\n\n  let statusMsg;\n  function showStatusMsg(params, append = false) {\n    if (!statusMsg) statusMsg = document.querySelector('#status .status__msg');\n    params = typeof params === 'string' ? params : JSON.stringify(params);\n    let html = statusMsg.innerHTML;\n    if (append) {\n      html += params;\n    } else {\n      html = params;\n    }\n    html = html.trim();\n    statusMsg.innerHTML = html;\n  }\n})();\n"
  },
  {
    "id": "20250816212926-0000036",
    "name": "-Middle-click_to-expand_file_tree",
    "type": "js",
    "enabled": true,
    "content": "/* 中键点击展开文档树 JS片段 */\n(async () => {\n  let g_reset = setInterval(main, 2000);\n\n  function main() {\n    if (document.querySelector('.sy__file')) {\n      clearInterval(g_reset);\n    } else {\n      return false;\n    }\n    document.querySelector('.sy__file').addEventListener('mousedown', event => {\n      if (event.button !== 1) return;\n      if (!event.target.classList.contains('b3-list-item__text'))\n        let target = event.target.parentNode;\n      let temp = event.target;\n      for (let i = 0; i < 4 && temp; i++) {\n        if (temp?.getAttribute(\"data-type\") === \"navigation-file\"\n          || temp?.getAttribute(\"data-type\") === \"navigation-root\") {\n          target = temp;\n          break;\n        }\n        temp = temp?.parentNode;\n      }\n      if (target?.getAttribute(\"data-type\") === \"navigation-file\"\n        || target?.getAttribute(\"data-type\") === \"navigation-root\") {\n        const b3ListItemToggle = target.querySelector('.b3-list-item__toggle');\n        const title = target.querySelector('.b3-list-item__text');\n        if (b3ListItemToggle.classList.contains('fn__hidden')) return;\n        event.preventDefault();\n        b3ListItemToggle.click();\n        if (event.ctrlKey) {\n          title.click();\n        }\n      }\n    }, true);\n  }\n})();\n"
  },
  {
    "id": "20250816212926-0000037",
    "name": "-slash_menu_arrow_keys_command",
    "type": "js",
    "enabled": true,
    "content": "/* from wilsons\n当开启筛选后, 为个人代码, 如果需要全部 wilsons 代码请关注\nhttps://ld246.com/article/1724305128590/comment/1724740441386#comments\n*/\n\n// see https://ld246.com/article/1723539516115\n(() => {\n\n  // 使用兼容模式，\n  // 如果左右箭头有问题，可以使用兼容模式，兼容模式用ctrl/cmd + 方向键移动\n  // 默认false，未开启，设为true开启\n  const useCompatibilityMode = false;\n\n  ////////////// 以下代码不涉及配置项，如无必要勿动 //////////////////////////\n  // 判断是否Asri主题\n  const theme = siyuan.config.appearance.mode === 0 ? siyuan.config.appearance.themeLight : siyuan.config.appearance.themeDark;\n  if (theme !== 'Asri') return;\n\n  // 设置下一个元素的焦点\n  function nextElementFocus(currentFocus, nextElement) {\n    currentFocus.classList.remove(\"b3-list-item--focus\");\n    nextElement?.classList.add(\"b3-list-item--focus\");\n  }\n\n\n  // 等待元素渲染完成后执行\n  function whenElementExist(selector) {\n    return new Promise(resolve => {\n      const checkForElement = () => {\n        let element;\n        if (typeof selector === 'function') {\n          element = selector();\n        } else {\n          element = document.querySelector(selector);\n        }\n        if (element) {\n          resolve(element);\n        } else {\n          requestAnimationFrame(checkForElement);\n        }\n      };\n      checkForElement();\n    });\n  }\n\n  function monitorHintMenu(layoutCenter) {\n    // 定义一个回调函数处理 DOM 变化\n    const observerCallback = (mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          // 当 layout__center 元素有新的子元素被添加或删除时触发\n          mutation.addedNodes.forEach((node) => {\n            if (node.classList && node.classList.contains('hint--menu')) {\n              // 检查新添加的节点是否是 .hint--menu\n              checkFnNoneClass(node);\n            }\n          });\n        } else if (mutation.type === 'attributes' && mutation.target.classList.contains('hint--menu')) {\n          // 当 .hint--menu 元素的属性发生变化时触发\n          checkFnNoneClass(mutation.target);\n        }\n      });\n    };\n\n    // 检查是否有 .fn_none 类\n    function checkFnNoneClass(node) {\n      const hasFnNoneClass = node.classList.contains('fn__none');\n      if (!hasFnNoneClass) {\n        // 显示menu\n        hintMenuShow = true;\n        if (hintMenuTimer) clearTimeout(hintMenuTimer);\n      } else {\n        // 隐藏menu\n        if (hintMenuTimer) clearTimeout(hintMenuTimer);\n        hintMenuTimer = setTimeout(() => {\n          hintMenuShow = false;\n        }, 100);\n      }\n    }\n\n    // 配置 MutationObserver\n    const config = {childList: true, subtree: true, attributes: true, attributeFilter: ['class']};\n\n    // 创建一个新的 MutationObserver 实例\n    const observer = new MutationObserver(observerCallback);\n\n    // 开始观察 layout__center 元素\n    observer.observe(layoutCenter, config);\n\n    // 返回一个函数以停止观察\n    return () => {\n      observer.disconnect();\n    };\n  }\n\n  // region group mode\n  // 获取下一个分组元素的焦点\n  function focusNextGroupButton() {\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n    let nextElement = currentFocus.nextElementSibling;\n\n    // 继续查找下一个元素，直到找到一个按钮或.b3-menu__separator\n    while (nextElement && nextElement.classList.contains('b3-list-item') && !nextElement.classList.contains('b3-menu__separator')) {\n      nextElement = nextElement.nextElementSibling;\n    }\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n    if (nextElement && nextElement.classList.contains('b3-menu__separator')) {\n      nextElement = nextElement.nextElementSibling;\n    }\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表开头\n    if (!nextElement || !nextElement.classList.contains('b3-list-item')) {\n      nextElement = menu.querySelector('.b3-list-item');\n    }\n\n    nextElementFocus(currentFocus, nextElement);\n  }\n\n  // 获取上一个分组元素的焦点\n  function focusPreviousGroupButton() {\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n    let previousElement = currentFocus.previousElementSibling;\n\n    // 继续查找上一个元素，直到找到一个按钮或.b3-menu__separator\n    while (previousElement && previousElement.classList.contains('b3-list-item') && !previousElement.classList.contains('b3-menu__separator')) {\n      previousElement = previousElement.previousElementSibling;\n    }\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n    if (previousElement && previousElement.classList.contains('b3-menu__separator')) {\n      previousElement = previousElement.previousElementSibling;\n    }\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表结尾\n    if (!previousElement || !previousElement.classList.contains('b3-list-item')) {\n      previousElement = menu.querySelector('.b3-list-item:last-child');\n    }\n\n    nextElementFocus(currentFocus, getGroupFirstElement(previousElement));\n  }\n\n  // 获取分组的第一个元素\n  function getGroupFirstElement(currentFocus) {\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n    let previousElement = currentFocus.previousElementSibling;\n\n    // 继续查找上一个元素，直到找到一个按钮或.b3-menu__separator\n    while (previousElement && previousElement.classList.contains('b3-list-item') && !previousElement.classList.contains('b3-menu__separator')) {\n      previousElement = previousElement.previousElementSibling;\n    }\n\n    // 如果找到了.b3-menu__separator，就聚焦到它的前一个按钮\n    if (previousElement && previousElement.classList.contains('b3-menu__separator')) {\n      previousElement = previousElement.nextElementSibling;\n    }\n\n    // 如果没有找到任何按钮或.b3-menu__separator，循环到列表结尾\n    if (!previousElement || !previousElement.classList.contains('b3-list-item')) {\n      previousElement = menu.querySelector('.b3-list-item');\n    }\n    return previousElement;\n  }\n\n  // endregion group mode\n\n  // region search mode\n  function GetColData() {\n    const menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n    const currentFocus = menu.querySelector('.b3-list-item--focus');\n    const parent = currentFocus.parentNode;\n    const b3ItemStyle = window.getComputedStyle(document.querySelector(\".hint--menu .b3-list-item\"))\n    const lineHeight = +b3ItemStyle.lineHeight.slice(0, -2)\n    const marginBottom = +b3ItemStyle.marginBottom.slice(0, -2)\n    // 每个组有groupSize个元素\n    const groupSize = Math.floor(menu.offsetHeight / (lineHeight + marginBottom))\n\n    // 计算当前聚焦元素在其父元素中的索引\n\n    const childrens = []\n    for (let children of parent.children){\n      if (children.classList && children.classList.contains(\"b3-menu__separator\")){\n      }else{\n        childrens.push(children)\n      }\n    }\n    const currentFocusIndex = Array.prototype.indexOf.call(childrens, currentFocus);\n    const totalGroup = Math.ceil(childrens.length / groupSize);\n    const curGroup = Math.ceil((currentFocusIndex + 1) / groupSize);\n    let rowNum = (currentFocusIndex + 1) % groupSize;\n    if (rowNum === 0) {\n      rowNum = groupSize;\n    }\n    return {\n      parent: parent, rowNum: rowNum, groupSize: groupSize, curGroup: curGroup, childrens:childrens,\n      totalGroup: totalGroup, currentFocusIndex: currentFocusIndex, currentFocus: currentFocus\n    }\n  }\n\n  function moveFocusByCol(isToRight) {\n    const data = GetColData();\n    let newFocusIndex;\n    if (data.curGroup === 1 && !isToRight) {\n      newFocusIndex = SkipMenuToEnd(data, data.childrens);\n    } else if (data.curGroup === data.totalGroup && isToRight) {\n      newFocusIndex = data.rowNum - 1;\n    } else if (data.curGroup === data.totalGroup - 1 && isToRight) {\n      newFocusIndex = SkipMenuToEnd(data, data.childrens);\n    } else {\n      newFocusIndex = data.currentFocusIndex + (isToRight ? data.groupSize : -data.groupSize);\n    }\n    nextElementFocus(data.currentFocus, data.childrens[newFocusIndex]);\n  }\n\n  function SkipMenuToEnd(data, childrens) {\n    let lastGroupButtonNum = childrens.length % data.groupSize;\n    if (lastGroupButtonNum === 0) {\n      lastGroupButtonNum = data.groupSize;\n    }\n    if (data.rowNum <= lastGroupButtonNum) {\n      return childrens.length + data.rowNum - lastGroupButtonNum - 1;\n    } else {\n      return childrens.length - 1;\n    }\n  }\n\n  // endregion search mode\n\n  // region key monitor\n  function AddKeyEventListener() {\n    document.addEventListener('keydown', function (event) {\n      let menu;\n      if (useCompatibilityMode) {\n        if (!(event.ctrlKey || event.metaKey)) return\n        menu = document.querySelector(\".hint--menu:not(.fn__none)\");\n      } else {\n        if (!hintMenuShow) return;\n        menu = document.querySelector(\".hint--menu\");\n        menu.classList.remove(\"fn__none\");\n      }\n      if (menu) Do(menu, event,)\n    });\n  }\n\n  function Do(menu, event) {\n    const sepEl = document.querySelector(\"div.b3-menu__separator\");\n    if (event.key === 'ArrowLeft' || (event.shiftKey && event.key === \"Tab\"))\n      sepEl ? focusPreviousGroupButton() : moveFocusByCol(false);\n    else if (event.key === \"ArrowRight\" || event.key === \"Tab\")\n      sepEl ? focusNextGroupButton() : moveFocusByCol(true);\n    else if (event.key === 'Escape' || event.key === \"Enter\")\n      menu.classList.add(\"fn__none\");\n    else return;\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  // endregion key monitor\n\n  // region Main\n  let hintMenuShow = false;\n  let hintMenuTimer = null;\n\n  // 监控menu显示状态\n  if (!useCompatibilityMode) {\n    whenElementExist('.layout__center').then(async element => {\n      monitorHintMenu(element); // 等待标签页容器渲染完成后开始监听\n    });\n  }\n  // 监听按键\n  AddKeyEventListener()\n  // endregion Main\n})();\n"
  },
  {
    "id": "20250816212926-0000038",
    "name": "-smooth_cursor",
    "type": "js",
    "enabled": true,
    "content": "// 思源编辑器自定义光标\n// 顺滑光标+是否闪烁+自定义样式\n// 目前仅支持在编辑器中使用\n// todo 极致性能优化，太复杂暂时不实现(可参考下文优化说明)\n// see https://pipe.b3log.org/blogs/wilsons/%E6%80%9D%E6%BA%90/%E5%AE%9E%E6%97%B6%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF\n// version 0.0.10.1\n// 0.0.10.1 修复手机版点击光标消失问题\n// 0.0.10 重构光标获取算法；修复光标在行内公式等特殊情况时定位不准的问题；改进光标获取性能；改进标签切换等出现意外光标\n// 0.0.9.2 修改多层滚动条嵌套下的滚动延迟问题；\n// 0.0.9.1 优化滚动性能\n// 0.0.9 优化光标插入性能\n// 0.0.8 优化拖动时计算光标算法\n// 0.0.7 修复侧边栏拖动时，光标只能临时被隐藏的问题；增加手机版支持开关\n// 0.0.6 修复侧边栏拖动后光标定位不准和悬浮窗拖动时不能实时定位光标问题\n// 0.0.5 改进在光标闪烁时，当移动/输入/点击时的不自然，有光标突然消失感的问题；改进滚动时光标有闪烁的问题；取消选择文本是的顺滑效果\n// 0.0.4 优化滑动鼠标动画，更加丝滑\n// 0.0.3 修复手动拖动滚动条的bug和改变尺寸编辑器和拖动悬浮窗口光标刷新延后问题和光标位置及可见区域细节调整\n// 0.0.2 修复打开块等菜单时，光标显示在菜单之上的问题\n// see https://ld246.com/article/1747269101239 发布帖\n// see https://ld246.com/article/1747200651209 需求贴\n(() => {\n  // 是否使用光标顺滑动画效果 true 使用顺滑光标 false 不使用顺滑光标\n  const isCursorSmoothEnabled = true;\n\n  // 是否使用光标闪烁动画效果 true 闪动 false 不闪动\n  const isCursorBlinkEnabled = false;\n\n  // 是否也应用于文档标题中 true 应用 false 不应用\n  const isApplyToTitle = true;\n\n  // 设置光标是光标所在元素行高的多少倍，相当于按光标所在文本行高百分比设置光标高度\n  const cursorHeightRelativeToLineHeight = 0.88;\n\n  // 是否在手机端使用，如果手机端出现不兼容问时可以禁用手机端\n  // true 使用 false 不使用\n  const isUseInMobile = true;\n\n  if(!isUseInMobile && isMobile()) return;\n\n  // 其他光标样式，可以在这里改，颜色，宽高什么的\n  addStyle(`\n        .protyle-wysiwyg{ caret-color: transparent; } /* 隐藏编辑器默认光标 */\n        ${isApplyToTitle ? `.protyle-title__input{caret-color: transparent;}`: ''} /* 隐藏标题默认光标 */\n        /* 新光标样式 */\n        #custom-cursor {\n          /* 光标宽度 */\n          width: 1.5px;\n          \n          /* 预设光标高度，也可以这里写死，但写死不同的元素可能有差异（这里优先级高于动态计算） */\n          /* 这里行高仍然受cursorHeightRelativeToLineHeight的影响，如果想不受影响，把倍数设为1 */\n          /* height: 26px; */\n\n          /* 光标颜色 */\n          background: var(--b3-theme-on-background);\n\n          /* 以下样式，非必要勿改动 */\n          position: fixed;\n          pointer-events: none;\n          transition: ${isCursorSmoothEnabled?'transform 0.15s cubic-bezier(0.25, 0.1, 0.25, 1)':'none'};\n          z-index: 1; /* 这个会实时动态计算，这里设置并不起作用 */\n          transform: translate(0, 0);\n          will-change: transform; /* 启用 GPU 加速 */\n          backface-visibility: hidden; /* 避免重绘闪烁 */\n          opacity: 1; /* 默认不透明 */\n        }\n        /* 隐藏光标 */\n        #custom-cursor.hidden {\n          opacity: 0 !important;\n          animation: none !important;\n          transition: none !important;\n        }\n        /* 停止光标闪动 */\n        #custom-cursor.no-animation {\n            animation: none !important;\n        }\n        /* 停止顺滑光标效果 */\n        #custom-cursor.no-transition {\n          transition: none !important;\n        }\n        /* 添加闪烁动画 */\n        ${isCursorBlinkEnabled ? `\n            #custom-cursor {\n              animation: cursor-blink 1s steps(2, jump-none) infinite;\n            }\n            @keyframes cursor-blink {\n              from { opacity: 0; }\n              to { opacity: 1; }\n            }\n        `:''}\n        /* 侧边栏拖动手柄禁止选择，防止拖动时，被误插入marker标记（用于计算光标位置） */\n        .layout__resize{user-select: none;}\n    `);\n\n  // 插入光标元素并开启光标监听事件\n  document.body.insertAdjacentHTML('beforeend', '<div id=\"custom-cursor\" class=\"hidden\"></div>');\n  addCursorEvent();\n\n  //////////// 以下功能函数非必要勿动 /////////////\n  function addCursorEvent() {\n    const cursor = document.getElementById('custom-cursor');\n    let scrollTimeout = null;\n    let isUpdating = false;\n    let lastValidPos = null;\n    let lastScrollPos = { x: window.scrollX, y: window.scrollY };\n    let isFirstMove = true; // 新增首次移动标记\n    let blinkTimeout;\n    const BLINK_DELAY = 500; // 静止后开始闪烁的延迟时间\n    //let editorLastLeft = 0;\n    let firstProtyleIds = [];\n    let currentDocId = '';\n    let hidePos = null;\n\n    // 优先获取光标元素自身预设行高\n    const cursorElement = document.getElementById('custom-cursor');\n    const cursorStyle = cursorElement ? window.getComputedStyle(cursorElement) : null;\n    const presetHeight = cursorStyle ? parseFloat(cursorStyle.height) : null;\n\n    // 创建全局唯一 marker\n    const globalMarker = (() => {\n      const marker = document.createElement('span');\n      marker.textContent = '\\u200b';\n      marker.style.cssText = 'position: absolute; visibility: hidden; pointer-events: none;';\n      return marker;\n    })();\n\n    const handleScroll = () => {\n      // 清除闪烁并停止后续闪烁(滚动时必须停止动画，不然动画效果会让光标悬浮固定不动)\n      if(blinkTimeout) clearTimeout(blinkTimeout);\n      cursor.classList.add('no-animation');\n      // 清除顺滑效果，防止滚动时上下跳动\n      cursor.classList.add('no-transition');\n      updateCursor();\n      // clearTimeout(scrollTimeout);\n      // scrollTimeout = setTimeout(() => {\n      //     requestAnimationFrame(() => {\n      //         if (!isScrolling()) {\n      //             updateCursor();\n      //         }\n      //     });\n      // }, 200);\n    };\n\n    const isScrolling = () => {\n      const currentScrollPos = { x: window.scrollX, y: window.scrollY };\n      const isMoving = currentScrollPos.x !== lastScrollPos.x ||\n        currentScrollPos.y !== lastScrollPos.y;\n      lastScrollPos = currentScrollPos;\n      return isMoving;\n    };\n\n    // 获取光标位置，新方案\n    function getStablePosition() {\n      const sel = window.getSelection();\n      if (!sel.rangeCount) return null;\n\n      // 克隆并 collapse Range\n      const range = sel.getRangeAt(0).cloneRange();\n      range.collapse(true);\n\n      // 找到可编辑容器，用于取行高\n      let hitNode = sel.focusNode;\n      if (hitNode.nodeType === Node.TEXT_NODE) hitNode = hitNode.parentElement;\n      const editableEl = hitNode.closest('[contenteditable=\"true\"]');\n      const style = editableEl ? window.getComputedStyle(editableEl) : null;\n      // 优先用 line-height，否则 fallback 到 font-size * 1.625 或 26px\n      const rawLineH = style && parseFloat(style.lineHeight)\n        || (style && parseFloat(style.fontSize) * 1.625)\n        || 26;\n      const lineH = rawLineH;\n      const paddingLeft = style ? parseFloat(style.paddingLeft) || 0 : 0;\n\n      // 尝试浏览器原生的 clientRects\n      const rects = Array.from(range.getClientRects());\n      let baseRect, x;\n      if (rects.length) {\n        baseRect = rects[rects.length - 1];\n      } else {\n        // 先判断是否是段落空行，段落空行直接通过段落获取\n        const paragraph = findParentParagraph(range.startContainer);\n        if (paragraph && !paragraph.textContent.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim()) {\n          baseRect = paragraph.getBoundingClientRect();\n          const style = window.getComputedStyle(paragraph);\n          x = baseRect.left + parseFloat(style.paddingLeft);\n        } else {\n          // 回退：插 marker 测一次\n          range.insertNode(globalMarker);\n          baseRect = globalMarker.getBoundingClientRect();\n          globalMarker.remove();\n        }\n      }\n\n      // 计算高度：统一用行高 * 比例\n      const height = lineH * cursorHeightRelativeToLineHeight;\n\n      // 计算 y：把原生/marker 获取的 rect.top 对齐到行高\n      // rectTop + (rect.height - height)/2  可能让光标在垂直居中\n      const gap = (baseRect.height - height) / 2;\n      const y = baseRect.top + gap;\n\n      // x 贴在文字末尾\n      x = x ? x : baseRect.right;\n\n      return baseRect.width + baseRect.height > 0 ? { x, y, height } : null;\n    }\n\n    // const getStablePosition = () => {\n    //     const sel = window.getSelection();\n    //     if (!sel.rangeCount) return null;\n\n    //     document.body.clientWidth; // 强制重绘\n    //     const range = sel.getRangeAt(0).cloneRange();\n    //     range.collapse(true);\n\n    //     // （暂没用这个方案）使用优先级：光标预设高度 > 段落行高 > 默认20px\n    //     // const paragraph = findParentParagraph(range.startContainer);\n    //     // if (paragraph && !paragraph.textContent.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim()) {\n    //     //     const rect = paragraph.getBoundingClientRect();\n    //     //     const style = window.getComputedStyle(paragraph);\n    //     //     const height = (presetHeight || parseFloat(style.lineHeight) || 26) * cursorHeightRelativeToLineHeight;\n    //     //     const topGap = (parseFloat(style.lineHeight) - height) / 2;\n    //     //     return {\n    //     //         x: rect.left + parseFloat(style.paddingLeft),\n    //     //         y: rect.top + parseFloat(style.paddingTop) + topGap,\n    //     //         height: height\n    //     //     };\n    //     // }\n\n    //     // const marker = document.createElement('span');\n    //     // marker.textContent = '\\u200b';\n    //     // marker.style.cssText = 'position: absolute; visibility: hidden; pointer-events: none;';\n    //     // range.insertNode(marker);\n    //     // const rect = marker.getBoundingClientRect();\n    //     // marker.remove();\n\n    //     range.insertNode(globalMarker);\n    //     const rect = globalMarker.getBoundingClientRect();\n    //     globalMarker.remove();\n\n    //     // 最终高度逻辑：优先使用光标预设高度，否则用实际测量高度\n    //     const height = (presetHeight || rect.height)*cursorHeightRelativeToLineHeight;\n    //     const topGap = (rect.height - height) / 2;\n    //     return rect.width + rect.height > 0 ?\n    //         { x: rect.left, y: rect.top + topGap, height: height } :\n    //         null;\n    // };\n\n    const updateCursor = (event, eventType) => {\n      if (isUpdating) return;\n      isUpdating = true;\n\n      //requestAnimationFrame(() => {\n      const pos = hidePos ? hidePos : getStablePosition();\n      const output={cursorElement:null, isOuterElement: false};\n\n      if (!pos || !isInAllowElements(pos, output)) {\n        // 编辑器内的元素，但超出编辑器范围了隐藏\n        cursor.classList.add('hidden');\n        isUpdating = false;\n        //hidePos = pos;\n        return;\n      }\n\n      // 如果不是编辑器区域则隐藏光标(防止标签切换等出现意外光标)\n      if(eventType === 'selectionchange') {\n        if(isMobile()) {\n          // const docId =  output.cursorElement?.closest('.protyle:not(.fn__none)')?.querySelector('.protyle-title')?.dataset?.nodeId;\n          // if(currentDocId !== docId) {\n          //     if(docId) currentDocId = docId;\n          //     cursor.classList.add('hidden');\n          //     isUpdating = false;\n          //     return;\n          // }\n        } else {\n          const protyleId = output.cursorElement?.closest('.protyle:not(.fn__none)')?.dataset?.id;\n          if(!firstProtyleIds.includes(protyleId)){\n            if(protyleId) firstProtyleIds.push(protyleId);\n            cursor.classList.add('hidden');\n            isUpdating = false;\n            return;\n          }\n        }\n      }\n\n      // 点击非可编辑区域时不做任何操作，直接返回\n      if(output.cursorElement && !output.cursorElement.closest('[data-node-id] [contenteditable=\"true\"]')) {\n        cursor.classList.add('hidden');\n        isUpdating = false;\n        return;\n      }\n\n      // 清除之前的闪烁定时器\n      if(blinkTimeout) clearTimeout(blinkTimeout);\n      // 移除闪烁效果（当光标移动/输入/点击时不需要闪烁，不然会有突然消失感）\n      cursor.classList.add('no-animation');\n\n      // 处理首次移动\n      if (isFirstMove) {\n        cursor.classList.add('no-transition');\n        isFirstMove = false;\n      }\n\n      // 当选择文本时，不需要顺滑动画\n      if(eventType === 'selectionchange') {\n        const selection = window.getSelection();\n        if (selection.rangeCount > 0 && selection.toString()) {\n          cursor.classList.add('no-transition');\n        }\n      }\n\n      // 悬浮窗拖动窗口时，取消顺滑动画\n      if(['blockPopoverMove', 'protyleResize'].includes(eventType)) {\n        cursor.classList.add('no-transition');\n      }\n\n      // 更新位置前强制清除过渡\n      //const protyleContent = output.cursorElement?.closest('.protyle:not(.fn__none) .protyle-content');\n      //const editorRect = protyleContent.getBoundingClientRect();\n      // 兼容拖动侧边栏，鼠标位置+编辑器被移动距离（移动距离=当前编辑器left-上次编辑器left）\n      // 这里还有其他的算法，比如在或者光标位置时用 编辑器left-marker left得出相对距离，然后用pos.x+相对距离\n      //const realX = pos.x + (editorRect.left - (editorLastLeft||editorRect.left));\n      //editorLastLeft = editorRect.left;\n      cursor.style.transform = `translate(${pos.x}px, ${pos.y}px)`;\n      cursor.style.height = `${pos.height}px`;\n      cursor.classList.remove('hidden');\n      //hidePos = null;\n      cursor.style.zIndex = output.cursorElement ? getEffectiveZIndex(output.cursorElement) + 1 : ++window.siyuan.zIndex;\n\n      // 强制布局同步\n      void cursor.offsetHeight;\n\n      // 延迟恢复顺滑效果\n      requestAnimationFrame(() => {\n        cursor.classList.remove('no-transition');\n      });\n\n      // 延迟添加闪烁效果（待光标静止后恢复闪烁）\n      blinkTimeout = setTimeout(() => {\n        cursor.classList.remove('no-animation');\n      }, BLINK_DELAY);\n\n      lastValidPos = pos;\n      isUpdating = false;\n      //});\n    };\n\n    // 暂未用到\n    // const isInViewport = (pos) => {\n    //     return pos.y >= 0 &&\n    //            pos.y <= window.innerHeight &&\n    //            pos.x >= 0 &&\n    //            pos.x <= window.innerWidth;\n    // };\n\n    const isInAllowElements = (pos, output={cursorElement:null}) => {\n      const cursorElement = getCursorElement();\n      if(typeof output === 'object') output.cursorElement = cursorElement;\n\n      // 动态获取当前活动编辑区域\n      let protyleContent = cursorElement?.closest('.protyle:not(.fn__none) .protyle-content');\n      // 非编辑器内的元素返回\n      if (!protyleContent) {\n        output.isOuterElement = true;\n        return false;\n      }\n      // 如果不应用于标题返回\n      if(cursorElement.closest('.protyle-title__input') && !isApplyToTitle) return;\n\n      // 获取编辑区域可视范围\n      const editorRect = protyleContent.getBoundingClientRect();\n\n      // 检查坐标是否在编辑区域可视范围内\n      const isInEditor = pos.x >= editorRect.left &&\n        pos.x <= editorRect.right &&\n        pos.y >= editorRect.top &&\n        pos.y <= editorRect.bottom;\n\n      //获取滚动元素\n      const scrollEl = findClosestScrollableElement(cursorElement);\n      // 不是滚动元素直接返回编辑器区域\n      if(protyleContent === scrollEl || !isSelfOrDescendant(protyleContent, scrollEl)) {\n        return isInEditor;\n      }\n      // 获取滚动元素区域\n      const scrollElRect = scrollEl.getBoundingClientRect();\n      const isInScrollEl = pos.x >= scrollElRect.left &&\n        pos.x <= scrollElRect.right &&\n        pos.y >= scrollElRect.top &&\n        pos.y <= scrollElRect.bottom;\n\n      // 必须在滚动元素内且编辑器内\n      return isInScrollEl && isInEditor;\n    };\n\n    // 给元素添加绑定事件\n    const checkElementEvents = () => {\n      const cursorElement = getCursorElement();\n      if(!cursorElement) return;\n      // 给内部带有滚动条的元素添加滚动事件\n      const scrollEls = findClosestScrollableElements(cursorElement);\n      scrollEls.forEach(scrollEl => {\n        if(scrollEl && !scrollEl.handleClick) {\n          scrollEl.handleClick = handleScroll;\n          scrollEl.addEventListener('scroll', scrollEl.handleClick);\n          scrollEl.addEventListener('wheel', scrollEl.handleClick);\n        }\n      });\n      // 给protyle-content绑定改变尺寸事件\n      const protyleContent = cursorElement?.closest('.protyle:not(.fn__none) .protyle-content');\n      if (protyleContent && !protyleContent.handleResize) {\n        new ResizeObserver(entries => {\n          updateCursor({target: protyleContent}, 'protyleResize');\n        }).observe(protyleContent);\n      }\n      // 给block__popover绑定拖动事件\n      const blockPopover = cursorElement?.closest('.block__popover');\n      if (blockPopover && !blockPopover.handleDrag) {\n        const dragEl = blockPopover.querySelector('.resize__move');\n        if(!dragEl) return;\n        blockPopover.handleDrag = true;\n        let isDragging = false;\n        dragEl.addEventListener('mousedown', function(e) {\n          isDragging = true;\n        });\n        dragEl.addEventListener('mousemove', function(e) {\n          if(isDragging) updateCursor(e, 'blockPopoverMove');\n        });\n        dragEl.addEventListener('mouseup', function(e) {\n          isDragging = false;\n        });\n      }\n    };\n\n    const events = [\n      ['scroll', () => handleScroll],\n      ['wheel', () => handleScroll],\n      ['touchmove', () => handleScroll],\n      ['selectionchange', (e)=>updateCursor(e, 'selectionchange'), { passive: true }],\n      ['keydown', () => requestAnimationFrame(updateCursor)],\n      ['input', () => requestAnimationFrame(updateCursor)],\n      ['click', (e) => {updateCursor(e, 'click');checkElementEvents();}],\n      ['compositionend', updateCursor],\n      ['mouseup', updateCursor],\n      ['resize', () => requestAnimationFrame(updateCursor), { passive: true }],\n      ['keyup', () => {checkElementEvents();}],\n    ];\n\n    events.forEach(([e, h, opts]) => {\n      document.addEventListener(e, h, opts);\n    });\n  }\n\n  function findParentParagraph(node) {\n    let current = node;\n    while (current && current !== document.body) {\n      if (current.dataset?.type === 'NodeParagraph') return current;\n      current = current.parentElement;\n    }\n    return null;\n  }\n\n  function getCursorElement() {\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      // 获取选择范围的起始位置所在的节点\n      const startContainer = range.startContainer;\n      // 如果起始位置是文本节点，返回其父元素节点\n      const cursorElement = startContainer.nodeType === Node.TEXT_NODE\n        ? startContainer.parentElement\n        : startContainer;\n\n      return cursorElement;\n    }\n    return null;\n  }\n\n  function addStyle(css) {\n    const style = document.createElement('style');\n    style.innerHTML = css;\n    document.head.appendChild(style);\n  }\n\n  // 获取实际生效的z-index\n  function getEffectiveZIndex(element) {\n    let current = element;\n    while (current) {\n      const style = window.getComputedStyle(current);\n      const zIndex = style.zIndex;\n      const position = style.position;\n\n      // 如果是根元素，直接返回 0\n      if (current === document.documentElement) return 0;\n\n      // 判断当前元素是否创建了层叠上下文\n      let isStackingContext = false;\n      // 条件1: position 是 fixed 或 sticky（自动创建层叠上下文，即使 z-index 是 auto）\n      if (position === 'fixed' || position === 'sticky') {\n        isStackingContext = true;\n      }\n      // 条件2: position 是 absolute/relative 且 z-index 非 auto\n      else if ((position === 'absolute' || position === 'relative') && zIndex !== 'auto') {\n        isStackingContext = true;\n      }\n      // 其他条件（如 opacity < 1、transform 等）需要额外判断，此处暂未实现\n\n      // 如果当前元素是层叠上下文，返回其 z-index（auto 视为 0）\n      if (isStackingContext) {\n        return zIndex === 'auto' ? 0 : parseInt(zIndex, 10);\n      }\n\n      current = current.parentElement;\n    }\n    return 0; // 理论上不会执行到此处\n  }\n\n  function hasScroll(el) {\n    const style = getComputedStyle(el);\n    const canScrollY = (style.overflowY === 'scroll' || style.overflowY === 'auto')\n      && el.scrollHeight > el.clientHeight;\n    const canScrollX = (style.overflowX === 'scroll' || style.overflowX === 'auto')\n      && el.scrollWidth > el.clientWidth;\n    return canScrollY || canScrollX;\n  }\n\n  // 检查有滚动条的父元素，返回所有\n  function findClosestScrollableElements(element) {\n    const scrollableElements = [];\n    while (element) {\n      if (hasScroll(element)) {\n        scrollableElements.push(element);\n      }\n      element = element.parentElement;\n    }\n    return scrollableElements;\n  }\n\n  // 检查有滚动条的父元素，只返回最近一个\n  function findClosestScrollableElement(element) {\n    while (element && element !== document.documentElement) {\n      if (hasScroll(element)) return element;\n      element = element.parentElement;\n    }\n\n    // 显式检查根元素\n    const roots = [document.body, document.documentElement];\n    for (const root of roots) {\n      if (hasScroll(root)) return root;\n    }\n\n    return null;\n  }\n\n  // 检查是否自身或后代\n  function isSelfOrDescendant(protyleContent, scrollEl) {\n    return protyleContent === scrollEl || protyleContent.contains(scrollEl);\n  }\n\n  function isMobile() {\n    return !!document.getElementById(\"sidebar\");\n  }\n})();\n"
  }
]